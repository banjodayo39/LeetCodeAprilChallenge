class Solution {
    var minN  = Int.max
            var prev : Int?

    func minDiffInBST(_ root: TreeNode?) -> Int {
        
        dfs(root)

        return minN
    }
    
    func dfs(_ node : TreeNode?){
        
        
        guard var root = node else {
            return
        }
        
        
        if let l = root.left{
            dfs(l)
        }
        
        if let p = prev{
           minN = min(minN, root.val - p) 
        }
        prev = root.val
        
        if let r = root.right{
            dfs(r)
        }  
        
    }
}

class Solution {
    var res = [Int]()
    func getMinimumDifference(_ root: TreeNode?) -> Int {
        guard let node = root else{
            return 0
        }
        populateArray(node)
        
        print(res)
        res.sort()
        
        var minNum = Int.max
        
        for i in 1..<res.count{
            minNum = min(minNum, res[i]-res[i-1])
        }
        
        return minNum
    }
    
    func populateArray(_ root: TreeNode){
        if let left = root.left{
            populateArray(left)
        }
        
        res.append(root.val)
        
        if let right = root.right{
            populateArray(right)
        }
    }
}
