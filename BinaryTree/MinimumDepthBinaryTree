struct TreeNodeItem {
    var node : TreeNode
    var depth : Int
    
    init(_ node : TreeNode, _ depth : Int){
        self.node = node
        self.depth = depth
    }
}

class Solution {
    
    func minDepth(_ root: TreeNode?) -> Int {
        
        guard var node = root else{
            return 0
        }
        
        var nodeItem = TreeNodeItem(node, 1)
        
        var queue = [TreeNodeItem]()
        queue.append(nodeItem)
        
        while(!queue.isEmpty){
            
            var size = queue.count
            
            var currItem = queue.removeFirst()
            
            var currNode = currItem.node
            var currDepth = currItem.depth
            
            if(currNode.left == nil && currNode.right == nil){
                return currDepth
            }
            
            if(currNode.left != nil){
                queue.append( TreeNodeItem(currNode.left!, currDepth + 1))
            }
            if(currNode.right != nil){
                queue.append( TreeNodeItem(currNode.right!, currDepth + 1))
            }
            
        }
        return 0
    }
}
