class Solution {
    var arr1 = [Int]()
    var arr2 = [Int]()
    
    func isSubtree(_ root: TreeNode?, _ subRoot: TreeNode?) -> Bool {
    
        
        return dfs(root, subRoot)
    }
    
    func dfs(_ node1 : TreeNode?, _ node2 : TreeNode?) -> Bool {
           if node1 == nil && node2 == nil{
               return true
           }
        
           if node1 == nil || node2 == nil{
               return false
           }
           
           if node1!.val  == node2!.val && isSameTree(node1, node2){
               return true
           }
        
           return dfs(node1?.left, node2) || dfs(node1?.right, node2)

    }
    
    func isSameTree(_ node1 : TreeNode?, _ node2 : TreeNode?) -> Bool {
        
        if node1 == nil && node2 == nil{
            return true
        } else if node1 == nil || node2 == nil{
            return false
        } else if node1!.val != node2!.val{
            return false
        }
        
        return isSameTree(node1?.left , node2?.left) && isSameTree(node1?.right, node2?.right)
    }
}

//java
class Solution {
    public boolean isSubtree(TreeNode root, TreeNode subRoot) {
        if(root == null) {
            return false;
        }
        
        return 
            (root.val == subRoot.val ? ist(root, subRoot) : false) ||
            isSubtree(root.left, subRoot) ||
            isSubtree(root.right, subRoot);
    }
    
    private boolean ist(TreeNode root1, TreeNode root2) {
        if(root1 == null && root2 == null) {
            return true;
        }
        
        if(root1 == null || root2 == null) {
            return false;
        }
        
        return (root1.val == root2.val) && ist(root1.left, root2.left) && ist(root1.right, root2.right);
    }
}
