
//Optimized “disjoint set” with Path Compression and Union by Rank

class UnionFind{
    
    var root  : [Int]
    var rank : [Int]
    init(_ length: Int){
        root = [Int]()
        rank = [Int](repeating: 1, count: length)
        (0..<length).map{
            root.append($0)
        }
    }
    
    func find(_ val: Int) -> Int{
        if val == root[val]{
            return val
        }
        root[val] = find(root[val])
        return root[val]
    }
    
    
    func union(_ x: Int, _ y : Int){
        var rootX = self.find(x)
        var rootY = self.find(y)
        if rootX != rootY{
            if self.rank[rootX] > self.rank[rootY]{
               self.root[rootY] = rootX
            }
            else if self.rank[rootX] < self.rank[rootY]{
                self.root[rootX] = rootY
            }else{
                self.root[rootY] = rootX
                self.rank[rootX] += 1
            }
        }
    }
}

//Optimized “disjoint set” with Path Compression Only

class UnionFind{
    
    var root  : [Int]
    init(_ length: Int){
        root = [Int]()
        (0..<length).map{
            root.append($0)
        }
    }
    
    func find(_ val: Int) -> Int{
        if val == root[val]{
            return val
        }
        root[val] = find(root[val])
        return root[val]
    }
    
    
    func union(_ x: Int, _ y : Int){
        var rootX = find(x)
        var rootY = find(y)
        
        if rootX != rootY{
            root[y] = find(x)
        }
    }
}
