class Solution {
    func ladderLength(_ beginWord: String, _ endWord: String, _ wordList: [String]) -> Int {
        
        var queue = [String]()
        
        var words = Set(wordList)
        
        words.remove(beginWord)
        
        queue.append(beginWord)
        
        if !words.contains(endWord){
            return 0
        }
        
         var level = 0
        
        while  !queue.isEmpty{
             
            var size = queue.count
            level += 1
            
            for i in 0..<size{
                var currentWord = queue.removeFirst()
                
                if currentWord == endWord{
                    return level
                }
                
                 let edges = neighbors(currentWord)
                for edge in edges{
                        if words.contains(edge){
                            words.remove(edge)
                            queue.append(edge)
                        }
                    }
            }
            
        }
        
        return 0
    }
    
    func neighbors(_ str: String) -> [String]{
        var result = [String]()
        var chars = Array(str)
        
        for i in 0..<chars.count{

                let temp  = chars[i]

                for c in "abcdefghijklmnopqrstuvwxyz"{
                    chars[i] = c
                    result.append(String(chars))
                }
                chars[i] = temp
            }

        return result
    }
}
