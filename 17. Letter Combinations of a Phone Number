class Solution {
    var map = [Character : [String]]()
    var result = Set<String>()
    var chars = [Character]()
    
    func letterCombinations(_ digits: String) -> [String] {
        map = ["2" : ["a", "b", "c"],
                "3" : ["d", "e", "f"],
                "4": ["g", "h", "i"],
              "5" : ["k", "j", "l"],
              "6" : ["m", "n", "o"],
              "7": ["p", "q", "r", "s"],
             "8" : ["t", "u", "v"],
              "9" : ["w", "x", "y", "z"]
              ]
        
        if digits.count == 0{
            return []
        }
        var start = ""
        chars = Array(digits)
           
        dfs(&start, 0, digits.count)
            
        return Array(result)

    }
    
    
    func dfs(_ curr: inout String, _ index: Int, _ limit : Int){
        /*
           start  "aei"
            i      2
            j.     a
            result ["aeh", "aei" ]
             2 , 3, 4
        */
        if curr.count == limit{
            result.insert(curr)
            return
        }
        
        if index == limit{
            return
        }
        
        
        for j in map[chars[index]] ?? []{
                curr.append(j)
                dfs(&curr, index+1, limit)
                curr.removeLast()
            }
    }
    
