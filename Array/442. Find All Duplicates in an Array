/**
O(n) space and time
*/

class Solution {
    func findDuplicates(_ nums: [Int]) -> [Int] {
        var numSet = Set<Int>()
        var result = [Int]()
        
        for i in nums{
            if numSet.contains(i){
                result.append(i)
            } else{
                numSet.insert(i)
            }
        }
        
        return result
    }
}

/**
O(n) time  and constant space complexity
*/

class Solution2 {
    func findDuplicates(_ nums: [Int]) -> [Int] {
        var result = [Int]()
        var nums = nums
        
        for i in 0...nums.count-1{
            var j = abs( nums[i]) - 1
            if nums[j] < 0 {
                result.append(j+1)
            }
            nums[j] = -nums[j]
        }
        
        return result
    }
}
