
func CountSubsetWithGivenSum(_ nums: [Int], _ index : Int, _ sum : Int) -> Int{
    
    if sum == 0{
        return 1
    }
    
    if index == nums.count{
        return 0
    }
    
    if nums[index] > sum{
        return dfs(nums, index+1, sum)
    }
    
    return  dfs(nums, index+1, sum-nums[index]) + dfs(nums, index+1, sum)
}

func CountSubsetWithGivenSum(_ arr: [Int], _ val : Int)->Int{
    
    var dp = Array(repeating: Array(repeating: 0, count: val+1), count: arr.count+1)
    
    for i in 0...arr.count{
        dp[i][0] = 1
    }
        
    for i in 1...arr.count{
        for j in 1...val{
            
            if arr[i-1] > j{
                dp[i][j] = dp[i-1][j]
            }else{
                dp[i][j] = dp[i-1][j] + dp[i-1][j-arr[i-1]]
            }
                
        }
    }
    
    return dp[arr.count][val]
}
