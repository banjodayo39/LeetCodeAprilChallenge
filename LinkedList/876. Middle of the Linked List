class Solution {
    func middleNode(_ head: ListNode?) -> ListNode? {
        
        var stackNode = [ListNode]()
        
        var currNode = head 
        
        while currNode != nil{
            stackNode.append(currNode!)
            currNode = currNode?.next
        }
        
        return stackNode[stackNode.count/2]
        
        
    }
}


class Solution {
    func middleNode(_ head: ListNode?) -> ListNode? {
        
       var fast = head 
        var slow = head 
        
       while fast != nil && fast.next != nil{
           slow = slow?.next 
           fast = fast?.next?.next
       } 
        
        return slow
        
    }

