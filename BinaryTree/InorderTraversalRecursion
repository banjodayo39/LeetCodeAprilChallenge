
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init() { self.val = 0; self.left = nil; self.right = nil; }
 *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }
 *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {
 *         self.val = val
 *         self.left = left
 *         self.right = right
 *     }
 * }
 * Time complexity : O(n)O(n)
 * Space complexity : O(n). Arraylist of size O(n) is used.
 */
class Solution {
    func inorderTraversal(_ root: TreeNode?) -> [Int] {
        var paths = [Int]()

        guard let node = root else{
            return []
        }
        
        appendNode(node, &paths)
        
        return paths
    }
    
    func appendNode(_ root : TreeNode?, _ treeList : inout [Int]){
        
        guard let root = root else{
            return
        }
            
        appendNode(root.left, &treeList)
        
         treeList.append(root.val)
        
        appendNode(root.right, &treeList)
    }
}
