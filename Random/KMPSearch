func  computeLPSArray(_ pat: [Character], _ M: Int, _ lps : inout [Int])
 {
     // length of the previous longest prefix suffix
     var len = 0
     var i = 1
     lps[0] = 0 // lps[0] is always 0

     // the loop calculates lps[i] for i = 1 to M-1
     while (i < M) {
         if (pat[i] == pat[len]) {
             len += 1
             lps[i] = len;
             i += 1
         }
         else // (pat[i] != pat[len])
         {
             // This is tricky. Consider the example.
             // AAACAAAA and i = 7. The idea is similar
             // to search step.
             if (len != 0) {
                 len = lps[len - 1];

                 // Also, note that we do not increment
                 // i here
             }
             else // if (len == 0)
             {
                 lps[i] = len;
                 i += 1
             }
         }
     }
 }

func KMPSearch( _ pat : String, _ txt : String)
    {
        let pat = Array(pat)
        let txt = Array(txt)
    
        let M = pat.count
        let N = txt.count
  
        // create lps[] that will hold the longest
        // prefix suffix values for pattern
       var lps = [Int](repeating: 0, count: M)
        var j = 0 // index for pat[]
  
        // Preprocess the pattern (calculate lps[]
        // array)
        computeLPSArray(pat, M, &lps);
  
        var i = 0 // index for txt[]
    
        while (i < N) {
            if (pat[j] == txt[i]) {
                j += 1
                i += 1
            }
            if (j == M) {
                print("Index found at \(i - j)")
                j = lps[j - 1]
            }
  
            // mismatch after j matches
            else if (i < N && pat[j] != txt[i]) {
                // Do not match lps[0..lps[j-1]] characters,
                // they will match anyway
                if (j != 0){
                    j = lps[j - 1]
                }
                else
                {
                    i = i + 1
                }
            }
        }
    }

let txt = "ABABDABACDABABCABAB"
let pat = "ABABCABAB"
KMPSearch(pat, txt)
