class Solution {
    
    var moves = [[0, 1], [0, -1], [-1, 0], [1, 0]]
    
    func longestIncreasingPath(_ matrix: [[Int]]) -> Int {
       
        let n = matrix.count
        let m  = matrix[0].count
        
        var cache = Array(repeating: Array(repeating: 0, count: m), count: n)
        
        var ans = 0
        
        for i in 0..<n{
            for j in 0..<m{
                let res =  dfs(matrix, i, j, &cache)
                ans = max(ans, res)
            }
        }
        
        return ans
    }
    
    func dfs(_ matrix : [[Int]], _ row: Int, _ col : Int, _ cache: inout [[Int]]) -> Int{
        var ans = 0
        
        if cache[row][col] != 0 {
            return  cache[row][col]
        }
        
        for move in moves{
            let x = move[0] + row
            let y = move[1] + col
            
            if 0 <= x && x < matrix.count && 0 <= y && y < matrix[0].count && matrix[x][y] > matrix[row][col]{
                cache[row][col] = max( cache[row][col] , dfs(matrix, x, y, &cache))
            }
            
        }
        
        cache[row][col] += 1
        return cache[row][col]
    }
}
