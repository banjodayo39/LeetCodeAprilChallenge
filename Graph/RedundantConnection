class Solution {
    
   
    
    func findRedundantConnection(_ edges: [[Int]]) -> [Int] {
        
        var parent = [Int](repeating : 0, count : edges.count + 1)
        
        for edge in edges{
            
            var u = edge[0]
            var v = edge[1]
            
            var pu = findP(u, &parent)
            var pv = findP(v, &parent)
            
            if pu == pv {
                return edge
            }
            
            parent[pv] = pu
            
        }
        
        return [0, 0]
    }
    
    func findP(_ v : Int, _ parent : inout [Int]) -> Int{
        
        if(parent[v] == 0){
            parent[v] = v
        } 
        
        if parent[v] != v{
            parent[v] = findP(parent[v], &parent)
        }
        return parent[v]
    }
}


//DFS Solution

class Solution2 {
    func findRedundantConnection(_ edges: [[Int]]) -> [Int] {
        
        var graph = [Int: [Int]]()
 
        
        for edge in edges{
            var visited = Set<Int>()
            
            if graph.keys.contains(edge[0]) && 
            graph.keys.contains(edge[1]) && dfs(edge[0], edge[1], &visited, graph){
                return edge
            }
            
            if graph.keys.contains(edge[0]){
                graph[edge[0]]?.append(edge[1])
            } else {
                graph[edge[0]] = [edge[1]]

            }
        
            if graph.keys.contains(edge[1]){
                graph[edge[1]]?.append(edge[0])
            } else {
                graph[edge[1]] = [edge[0]]

            }
            
            
        }
        
        return []
    }
  
    func dfs(_ source : Int, _ target : Int, _ visited : inout Set<Int>,
             _ graph : [Int: [Int]]) -> Bool{
        if !visited.contains(source){
            visited.insert(source)
             
            if source == target {
                return true
            }
            
            for i in graph[source]!{
                if (dfs(i, target, &visited, graph)){
                    return true
                }
            }
        }
        return false
    }
}
