class Solution {

    //Time complexity :  O(2 ^n)
    var set : Set<String>!
    
    func wordBreak(_ s: String, _ wordDict: [String]) -> Bool {
        
        set = Set(wordDict)
        var chars = Array(s)
          
        return dfs(chars, 0)
    }
    
    
    func dfs(_ w : [Character], _ st : Int) -> Bool{
        //print("ended", st)
         if w.count == st{
             return true
         }
    
        for i in st+1...w.count{
            if (set.contains(String(w[st..<i])) && dfs(w, i)){
                return true
            }
        }
                 
        return false 
       
    }
    
    
    // Time compleity
    
     func wordBreak(_ s: String, _ wordDict: [String]) -> Bool {
        
        let n = s.count
        var dp = [Bool](repeating: false, count: n+1)
        dp[0] = true
        var set = Set(wordDict)
        
        let chars = Array(s)
        
        for i in 0...n{
            for j in 0..<i{
                if dp[j] && set.contains(String(chars[j..<i])){
                    dp[i] = true
                    break
                }
            }
        }
        
        
        return dp[n]
        
    }
}
