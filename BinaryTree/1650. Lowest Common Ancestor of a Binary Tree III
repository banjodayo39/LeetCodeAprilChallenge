class Solution {
    func lowestCommonAncestor(_ p: Node?,_ q: Node?) -> Node? {
        
        var parent = p
        var parentSet = Set<Int>()
        
        while parent != nil{
            parentSet.insert(parent!.val)
            parent = parent?.parent
        }
        
        parent = q
        
        while parent != nil{
            if parentSet.contains(parent!.val){
                return parent
            }
            parent = parent?.parent
        }
        
        return nil
    }
}

class Solution {
    func lowestCommonAncestor(_ p: Node?,_ q: Node?) -> Node? {
        
        var pNode = p
        var qNode = q
        
        while pNode != qNode{
            pNode = pNode?.parent ?? q
            qNode = qNode?.parent ?? p
        }
        
        return pNode
    }
}

extension Node : Equatable{
    
    public static func ==(_ lhs: Node, _ rhs : Node) -> Bool{
        return lhs.val == rhs.val
    }
}
