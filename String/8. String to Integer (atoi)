class Solution {
    func myAtoi(_ s: String) -> Int {
        
        var result = 0
        var isPostive = true
        var i = 0
        
        if s.isEmpty || s == " "{
            return 0
        }
  
        
        while i < s.count && s.charAt(i).isWhitespace{
             i += 1
        }
        
        if i >= s.count{
            return 0
        }
        
        if s.charAt(i) == "-"{
            isPostive = false
            i += 1
        }else if  s.charAt(i) == "+"{
            i += 1
        }
        
        if i >= s.count{
            return 0
        }
        
        
      for j in i..<s.count{
        let char = s.charAt(j)
          
        if char.isNumber{
            result = result * 10 + (Int(String(char)) ?? 0)
            if(result >= 2147483647){ //break if reached to integer max value
             break;
            }
        }else{
            break
        }

    }
        
        return isPostive ? min(result, 2147483647) : (-1 * min(result, 2147483648))
        
    }
}

extension String{
    
    func charAt(_ position: Int) -> Character{
        return self[self.index(self.startIndex, offsetBy: position)]
    }
}
