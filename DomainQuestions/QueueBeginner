
DispatchQueue.global().sync{
    sleep(2)
    print("sync: Inside")
}

print("sync: Outside")
// sync: Inside
//sync : Outside

DispatchQueue.global().async{
    sleep(2)
    print("async: Inside")
}

print("async: Outside")
// async: Outside
//async : Inside



DispatchQueue.main.asyncAfter(deadline : DispatchTime.now() + 5){
    print("this runs after 5 seconds")
}

DispatchQueue.main.asyncAfter(deadline: .now() + .seconds(2)){
    print("this runs after 2 seconds ")
}



let bQueue = DispatchQueue.global()
let group = DispatchGroup()

bQueue.async(group : group){
    sleep(3)
    print("Task 1 is done")
}

bQueue.async(group: group){
    sleep(1)
    print("Task 2 is done")
}

group.wait()
print("All task are done")

group.enter()
bQueue.async(group : group){
    sleep(3)
    print("Task 3 enter is done")
    group.leave()
}

bQueue.async(group: group){
    sleep(1)
    print("Task 4 enter is done")
    group.leave()

}

group.notify(queue: bQueue){
    print("All task done")
}


class SearchResultLoader{
    private let debounceInterval : TimeInterval
    private var pendingRequestWorkItem : DispatchWorkItem?
    
    init(_ interval : TimeInterval){
        self.debounceInterval = interval
        self.pendingRequestWorkItem = nil
    }
    
    func performSearch(for query : String){
        pendingRequestWorkItem?.cancel()
        
        let requestWorkItem = DispatchWorkItem{
            //perform the request 
        }
        
        pendingRequestWorkItem = requestWorkItem
        
        DispatchQueue.main.asyncAfter(
            deadline: .now() + debounceInterval,
            execute :requestWorkItem )
        
        
    }
}
