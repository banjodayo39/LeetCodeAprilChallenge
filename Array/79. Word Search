class Solution {
    let moves = [[0, 1], [0, -1], [1, 0], [-1, 0]]
    var board : [[Character]] = []

    func exist(_ board: [[Character]], _ word: String) -> Bool {
        self.board = board
        
        var path = Array(repeating : Array(repeating : false, count : board[0].count), count : board.count)
        
        var charArr = Array(word)
        
        for i in 0..<board.count{
            for j in 0..<board[0].count{
                if dfs(i, j,   0,  charArr){
                    return true
                }
            }
        }
        
        return false
    }
    
    func dfs(_ row : Int, _ col : Int, _ pos: Int, _ charArr : [Character]) -> Bool{
        
        if pos >= charArr.count{
            return true
        }
        
        if row < 0 || row >= board.count || col < 0 || col >= board[0].count || board[row][col] != charArr[pos]{
            return false
        }
        
        board[row][col] = "#"
        
        for move in moves{
            if dfs(row + move[0], col + move[1], pos + 1, charArr){
                return true
            }
        }
        
        board[row][col] = charArr[pos]
        return false
    }
}
